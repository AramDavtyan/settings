
class UserInfo extends React.Component {
  props: Props;
  state: void;

  _info: ?Info = null;

  static defaultProps = {
    showActions: true,
    showAvailability: true,
  };

  render(): ?React.Element<*> {
    if (!this.props.user) {
      return null;
    }

    const user: User = this.props.user;

    if (!this.props.user.full_name) {
      return (
        <View style={styles.loading}>
          <FBLoadingIndicator />
        </View>
      );
    }

    // title
    const title = user.full_name;

    // subtitle
    let subtitle = '';
    if (user.work_campus && user.work_building && user.work_floor) {
      const campus = (user.work_campus || '');
      const building = (user.work_building || '')
        .replace(campus, '')
        .replace(/^0+/, '');
      const floor = (user.work_floor || '')
        .replace(/^0+/, '');
      const location = (user.work_desk || '');
      subtitle = `${campus} ${building}.${floor} ${location}`;
    }

    // actions
    const actions: Array<Action> = [
      // TODO: add this button back in when routing is implemented
      // {
      //   type: 'outline-primary',
      //   title: 'Route',
      //   glyphName: 'directions',
      //   glyphSize: '16',
      //   onPress: this._onPressRoute,
      // },
    ];

    // Messenger integration is only available on iOS
    if (Platform.OS === 'ios') {
      actions.push({
        type: 'outline-primary',
        title: 'Message',
        glyphName: 'messages',
        glyphSize: '16',
        onPress: this._onPressMessage,
      });
    }

    actions.push({
      title: 'Meeting',
      glyphName: 'calendar',
      glyphSize: '16',
      onPress: this._onPressMeeting,
    });

    // left
    const left = (
      <Image
        style={styles.picture}
        source={
          user.profile_picture ||
          require('./images/user_placeholder.png')
        }
      />
    );

    // right
    const status = user.current_status_availability;
    const right = (
      <View style={styles.availability}>
        <Text
          style={[
            styles.availabilityText,
            status === 'NORMAL' && styles.statusNormal,
            status === 'SEMI_AVAILABLE' && styles.statusSemiAvailable,
            status === 'OFF_THE_GRID' && styles.statusOffTheGrid,
          ]}>
          {
            status === 'NORMAL' && 'Available' ||
            status === 'SEMI_AVAILABLE' && 'Sporadic' ||
            status === 'OFF_THE_GRID' && 'Off the Grid' ||
            ''
          }
        </Text>
      </View>
    );

    return (
      <Info
        ref={ref => {this._info = ref;}}
        title={title}
        subtitle={subtitle}
        availability={user.current_status_availability}
        left={left}
        right={this.props.showAvailability ? right : null}
        actions={this.props.showActions ? actions : []}
        onPress={this._onPressHeader}
      />
    );
  }

  hide(): void {
    if (this._info) {
      this._info.hide();
    }
  }

  _onPressHeader = (): void => {
    if (this.props.user && this.props.user.unencoded_id) {
      Events.navigateToUser(this.props.user.unencoded_id);
    }
  };

  _onPressRoute(): void {
    if (this.props.user && this.props.user.id) {
      Events.navigateToWayfinder({user: this.props.user.id});
    }
  }

  _onPressMeeting = (): void => {
    if (this.props.user && this.props.user.unencoded_id) {
      Events.navigateToNewMeeting({}, {
        inviteeIDs: [this.props.user.unencoded_id],
      });
    }
  };

  _onPressMessage = (): void => {
    if (this.props.user) {
      // prefer messaging the @work user, if there is one
      const id =
        this.props.user.work_user &&
        this.props.user.work_user.id ||
        this.props.user.unencoded_id ||
        '';
      if (id) {
        Linking.openURL(`fb-messenger://user-thread/${id}`);
      }
    }
  };
}

const styles = StyleSheet.create({
  picture: {
    width: 40,
    height: 40,
    backgroundColor: 'rgb(196,210,231)',
    borderRadius: 2,
    resizeMode: 'cover',
  },
  availability: {
    flex: 1,
    width: 92,
    justifyContent: 'center',
  },
  availabilityText: {
    ...UFIGFontInternal.font('bold', 12),
    textAlign: 'right',
  },
  statusNormal: {
    color: Constants.Colors.Vibrant.NORMAL,
  },
  statusSemiAvailable: {
    color: Constants.Colors.Vibrant.SEMI_AVAILABLE,
  },
  statusOffTheGrid: {
    color: Constants.Colors.Vibrant.OFF_THE_GRID,
  },
  loading: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 10,
    backgroundColor: UFIGColorPalette.white,
    borderTopWidth: StyleSheet.hairlineWidth,
    borderTopColor: 'rgba(0, 0, 0, 0.1)',
  },
});

module.exports = Relay.createContainer(
  UserInfo,
  {
    fragments: {
      user: () => Relay.QL`
        fragment on Employee {
          id
          unencoded_id
          full_name
          work_campus
          work_building
          work_floor
          work_desk
          current_status_availability
          profile_picture {
            uri
          }
          work_user {
            id
          }
        }
      `,
    },
  },
);
